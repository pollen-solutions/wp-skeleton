#!/usr/bin/env bash

UNAMEOUT="$(uname -s)"

# Verify operating system is supported.
case "${UNAMEOUT}" in
Linux*) MACHINE=linux ;;
Darwin*) MACHINE=mac ;;
*) MACHINE="UNKNOWN" ;;
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
  echo "Unsupported operating system [$(uname -s)]. Supports macOS, Linux, and Windows (WSL2)." >&2
  exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
  # Determine if colors are supported...
  ncolors=$(tput colors)

  if test -n "$ncolors" && test "$ncolors" -ge 8; then
    BOLD="$(tput bold)"
    WHITE="$(tput setaf 7)"
    YELLOW="$(tput setaf 3)"
    GREEN="$(tput setaf 2)"
    NC="$(tput sgr0)"
  fi
fi

# Function that prints the available commands...
function display_help {
  BINARY=bigfish

  echo "Pollen Solutions Bigfish CLI"
  echo
  echo "${YELLOW}Configuring a Shell alias for the terminal session (recommended)${NC}"
  echo " alias bigfish='[ -f bigfish ] && bash bigfish || bash bin/bigfish'"
  echo
  echo "${YELLOW}Usage:${NC}" >&2
  echo " ${BINARY} COMMAND [options] [arguments]"
  echo
  echo "Unknown commands are passed to the docker-compose binary."
  echo
  echo "${YELLOW}Docker Compose Commands:${NC}"
  echo "  ${GREEN}${BINARY} install${NC}   Install the application"
  echo "  ${GREEN}${BINARY} uninstall${NC} Uninstall the application"
  echo "  ${GREEN}${BINARY} reinstall${NC} Reinstall the application"
  echo "  ${GREEN}${BINARY} build${NC}     Build the docker application image"
  echo "  ${GREEN}${BINARY} up${NC}        Restart the application"
  echo "  ${GREEN}${BINARY} up -d${NC}     Restart the application in the background"
  echo "  ${GREEN}${BINARY} flush${NC}     Remove orphans containers and restart the application"
  echo "  ${GREEN}${BINARY} flush -d${NC}  Remove orphans containers and restart the application in the background"
  echo "  ${GREEN}${BINARY} stop${NC}      Stop the application"
  echo "  ${GREEN}${BINARY} ps${NC}        Display the status of all containers"
  echo "  ${GREEN}${BINARY} logs${NC}      Display the logs of all containers"
  echo "  ${GREEN}${BINARY} logs -f${NC}   Display the logs output of all containers and follow changes"
  echo "  ${GREEN}${BINARY} ips${NC}       Show the ips of all containers"
  echo
  echo "${YELLOW}Apache Commands:${NC}"
  echo "  ${GREEN}${BINARY} apache${NC}    Run an Apache command"
  echo
  echo "${YELLOW}MySQL Commands:${NC}"
  echo "  ${GREEN}${BINARY} mysql${NC}     Start a MySQL CLI session within the 'mysql' container"
  echo
  echo "${YELLOW}PHP Commands:${NC}"
  echo "  ${GREEN}${BINARY} php${NC}       Run a snippet of PHP code"
  echo
  echo "${YELLOW}Composer Commands:${NC}"
  echo "  ${GREEN}${BINARY} composer${NC}  Run a Composer command"
  echo
  echo "${YELLOW}SMTP Commands:${NC}"
  echo "  ${GREEN}${BINARY} smtp${NC}      Run an MailHog command"
  echo "  ${GREEN}${BINARY} mail${NC}      Send a test mail"
  echo
  echo "${YELLOW}Node Commands:${NC}"
  echo "  ${GREEN}${BINARY} node${NC}      Run a Node command"
  echo
  echo "${YELLOW}NPM Commands:${NC}"
  echo "  ${GREEN}${BINARY} npm${NC}       Run a npm command"
  echo "  ${GREEN}${BINARY} npx${NC}       Run a npx command"
  echo
  echo "${YELLOW}Yarn Commands:${NC}"
  echo "  ${GREEN}${BINARY} yarn${NC}      Run a Yarn command"
  echo
  echo "${YELLOW}Application Console Commands:${NC}"
  echo "  ${GREEN}${BINARY} console${NC}   Run a console of application command"
  echo
  echo "${YELLOW}Container CLI:${NC}"
  echo "  ${GREEN}${BINARY} shell${NC}     Start a shell session within the application container"
  echo "  ${GREEN}${BINARY} bash${NC}      Alias for shell command"
  echo
  echo "${YELLOW}Environment variables Commands:${NC}"
  echo "  ${GREEN}${BINARY} env${NC}       Show all environment variables or one of existing if specified"
  echo
  echo "${YELLOW}Sharing publicly:${NC}"
  echo "  ${GREEN}${BINARY} share${NC}     Share the application publicly via a temporary URL"
  echo

  exit 1
}

# Function that prints the available commands...
function display_info {
  appLocal=127.0.0.1:8000
  appNetwork=$(service_ip php)
  pmaNetwork=$(service_ip phpmyadmin)
  smtpNetwork=$(service_ip smtp)
  mysqlNetwork=$(service_ip mysql)

  echo "Pollen Solutions Application services"
  echo
  echo "${YELLOW}Browse application:${NC}"
  echo "  ${GREEN}Local:${NC}              http://${appLocal}"
  echo "  ${GREEN}Network:${NC}            http://${appNetwork}"
  echo
  echo "${YELLOW}PhpMyAdmin:${NC}"
  echo "  ${GREEN}Network:${NC}            http://${pmaNetwork}"
  echo
  echo "${YELLOW}MailHog:${NC}"
  echo "  ${GREEN}Network:${NC}            http://${smtpNetwork}"
  echo
  echo "${YELLOW}MySQL:${NC}"
  echo "  ${GREEN}Host:${NC}               ${mysqlNetwork}"
  echo "  ${GREEN}Port:${NC}               3306"
  echo "  ${GREEN}Database:${NC}           ${MYSQL_DATABASE}"
  echo "  ${GREEN}User:${NC}               ${MYSQL_USER}"
  echo "  ${GREEN}Password:${NC}           ${MYSQL_PASSWORD}"
  echo "  ${GREEN}DSN:${NC}                mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@${mysqlNetwork}:3306/${MYSQL_DATABASE}"
  echo

  exit 1
}

function service_ip {
    docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(dc ps -aq $1)
}

# Function that outputs is not running...
function not_running {
  echo -e "${WHITE}Not running.${NC}" >&2
  exit 1
}

# docker-compose function shortcut
function dc() {
  docker-compose -p "$PROJECT_NAME" "$@"
}

# Source the "docker-compose.env.sh" file if it is available...
if [ -f ./bin/docker-compose.env.sh ]; then
  source ./bin/docker-compose.env.sh 2>/dev/null
fi

# Proxy the "help" command...
if [ $# -gt 0 ]; then
  if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
    display_help
  fi
else
  display_help
fi

if [ -z "$SKIP_CHECKS" ]; then
  # Ensure that Docker is running...
  if ! docker info >/dev/null 2>&1; then
    echo -e "${WHITE}Docker is not running.${NC}" >&2
    exit 1
  fi

  # Determine if is currently up...
  PSRESULT="$(dc ps -q)"
  if dc ps "$PROJECT_NAME" 2>&1 | grep 'Exit\|exited'; then
    echo -e "${WHITE}Shutting down old processes...${NC}" >&2

    dc down >/dev/null 2>&1

    EXEC="no"
  elif [ -n "$PSRESULT" ]; then
    EXEC="yes"
  else
    EXEC="no"
  fi
else
  EXEC="yes"
fi

# Installing project
if [ "$1" == "install" ]; then
  shift 1
  dc build &&
    dc up -d --remove-orphans

# Uninstalling project
elif [ "$1" == "uninstall" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc down --remove-orphans -v
  else
    not_running
  fi

# Reinstalling project
elif [ "$1" == "reinstall" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc down --remove-orphans -v &&
      dc build --no-cache &&
      dc up -d --remove-orphans
  else
    not_running
  fi

# Starts all containers or a specific container if necessary
elif [ "$1" == "flush" ]; then
  shift 1
  dc up --remove-orphans "$@"

# Displays container IPs
elif [ "$1" == "ips" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    docker inspect -f '{{.Name}} {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' \
      $(dc ps -aq) |
      column -t |
      sed 's#/##g' |
      sort -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n
  else
    not_running
  fi

# Opens a container shell
elif [ "$1" == "shell" ] || [ "$1" == "bash" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm "${@:-php}" /bin/bash
  else
    not_running
  fi

# Returns PHP command line help or launch a PHP specified command
elif [ "$1" == "apache" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm php "${@:--h}"
  else
    not_running
  fi

# Returns PHP command line help or launch a PHP specified command
elif [ "$1" == "php" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm php php "${@:--h}"
  else
    not_running
  fi

# Returns PHP command line help or launch a PHP specified command
elif [ "$1" == "mysql" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm mysql /bin/bash -c "mysql -u root -proot -h mysql"
  else
    not_running
  fi

# Returns NodeJs command line help or launch a NodeJS specified command
elif [ "$1" == "node" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm node "${@:--h}"
  else
    not_running
  fi

# Returns Mailhog command line help or launch a Mailhog specified command
elif [ "$1" == "smtp" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm smtp "${@:--h}"
  else
    not_running
  fi

elif [ "$1" == "mail" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm smtp sendmail --smtp-addr="smtp:1025" <<EOF
From: Sender SampleName <from@example.com>
To: Recipient SampleName <to@example.com>
Subject: Hello World !

Hey there,

It's works good !

Bye
EOF
  else
    not_running
  fi

## Returns Composer command line help or launch a Composer specified command
elif [ "$1" == "composer" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm php composer "${@:--h}"
  else
    not_running
  fi

## Returns NPM command line help or launch a NPM specified command
elif [ "$1" == "npm" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run -p 3000:3000 --rm node npm "${@:-help}"
  else
    not_running
  fi

## Returns NPX command line help or launch a NPX specified command
elif [ "$1" == "npx" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm node npx "${@:--h}"
  else
    not_running
  fi

## Returns YARN command line help or launch a YARN specified command
elif [ "$1" == "yarn" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm node yarn "${@:--h}"
  else
    not_running
  fi

# Returns App Console command line or launch a App Console specified command
elif [ "$1" == "console" ]; then
  shift 1
  if [ "$EXEC" == "yes" ]; then
    dc run --rm php php bin/console "${@:--v}"
  else
    not_running
  fi

elif [ "$1" == "env" ]; then
  shift 1
  if [ -z "$1" ]; then
    export
  else
    echo "$1=${!1:-null}"
  fi

# Share the site...
elif [ "$1" == "share" ]; then
    shift 1

    if [ "$EXEC" == "yes" ]; then
          dc run --rm -p 4040:4040 expose share http://$(service_ip php) \
                --server-host="${EXPOSE_SHARE_SERVER_HOST}" \
                --server-port="${EXPOSE_SHARE_SERVER_PORT}" \
                --subdomain="${EXPOSE_SHARE_SUBDOMAIN}" \
                --auth="${EXPOSE_SHARE_TOKEN}" \
                "$@"
          exit 1
    else
        sail_is_not_running
    fi

elif [ "$1" == "info" ]; then
  shift 1
  display_info

# Pass unknown commands to the "docker-compose" binary...
else
  dc "$@"
fi
